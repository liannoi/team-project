// <auto-generated />

using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using TeamProject.Persistence.Contexts.Identity;

namespace TeamProject.Persistence.Migrations.FilmsIdentity
{
    [DbContext(typeof(FilmsIdentityContext))]
    internal class FilmsIdentityContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
            {
                b.Property<string>("Id")
                    .HasColumnType("nvarchar(450)");

                b.Property<string>("ConcurrencyStamp")
                    .IsConcurrencyToken()
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("Name")
                    .HasColumnType("nvarchar(256)")
                    .HasMaxLength(256);

                b.Property<string>("NormalizedName")
                    .HasColumnType("nvarchar(256)")
                    .HasMaxLength(256);

                b.HasKey("Id");

                b.HasIndex("NormalizedName")
                    .IsUnique()
                    .HasName("RoleNameIndex")
                    .HasFilter("[NormalizedName] IS NOT NULL");

                b.ToTable("AspNetRoles");
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int")
                    .HasAnnotation("SqlServer:ValueGenerationStrategy",
                        SqlServerValueGenerationStrategy.IdentityColumn);

                b.Property<string>("ClaimType")
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("ClaimValue")
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("RoleId")
                    .IsRequired()
                    .HasColumnType("nvarchar(450)");

                b.HasKey("Id");

                b.HasIndex("RoleId");

                b.ToTable("AspNetRoleClaims");
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int")
                    .HasAnnotation("SqlServer:ValueGenerationStrategy",
                        SqlServerValueGenerationStrategy.IdentityColumn);

                b.Property<string>("ClaimType")
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("ClaimValue")
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("UserId")
                    .IsRequired()
                    .HasColumnType("nvarchar(450)");

                b.HasKey("Id");

                b.HasIndex("UserId");

                b.ToTable("AspNetUserClaims");
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
            {
                b.Property<string>("LoginProvider")
                    .HasColumnType("nvarchar(450)");

                b.Property<string>("ProviderKey")
                    .HasColumnType("nvarchar(450)");

                b.Property<string>("ProviderDisplayName")
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("UserId")
                    .IsRequired()
                    .HasColumnType("nvarchar(450)");

                b.HasKey("LoginProvider", "ProviderKey");

                b.HasIndex("UserId");

                b.ToTable("AspNetUserLogins");
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
            {
                b.Property<string>("UserId")
                    .HasColumnType("nvarchar(450)");

                b.Property<string>("RoleId")
                    .HasColumnType("nvarchar(450)");

                b.HasKey("UserId", "RoleId");

                b.HasIndex("RoleId");

                b.ToTable("AspNetUserRoles");
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
            {
                b.Property<string>("UserId")
                    .HasColumnType("nvarchar(450)");

                b.Property<string>("LoginProvider")
                    .HasColumnType("nvarchar(450)");

                b.Property<string>("Name")
                    .HasColumnType("nvarchar(450)");

                b.Property<string>("Value")
                    .HasColumnType("nvarchar(max)");

                b.HasKey("UserId", "LoginProvider", "Name");

                b.ToTable("AspNetUserTokens");
            });

            modelBuilder.Entity("TeamProject.Domain.Entities.Actor.Actor", b =>
            {
                b.Property<int>("ActorId")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int")
                    .HasAnnotation("SqlServer:ValueGenerationStrategy",
                        SqlServerValueGenerationStrategy.IdentityColumn);

                b.Property<DateTime>("Birthday")
                    .HasColumnType("date");

                b.Property<string>("FirstName")
                    .IsRequired()
                    .HasColumnType("nvarchar(54)")
                    .HasMaxLength(54);

                b.Property<string>("LastName")
                    .IsRequired()
                    .HasColumnType("nvarchar(54)")
                    .HasMaxLength(54);

                b.HasKey("ActorId");

                b.ToTable("Actor");
            });

            modelBuilder.Entity("TeamProject.Domain.Entities.Actor.ActorPhoto", b =>
            {
                b.Property<int>("PhotoId")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int")
                    .HasAnnotation("SqlServer:ValueGenerationStrategy",
                        SqlServerValueGenerationStrategy.IdentityColumn);

                b.Property<int>("ActorId")
                    .HasColumnType("int");

                b.Property<string>("Path")
                    .IsRequired()
                    .HasColumnType("nvarchar(512)")
                    .HasMaxLength(512);

                b.HasKey("PhotoId");

                b.HasIndex("ActorId");

                b.HasIndex("Path")
                    .IsUnique()
                    .HasName("UNQ_ActorsPhotos_Path");

                b.ToTable("ActorPhoto");
            });

            modelBuilder.Entity("TeamProject.Domain.Entities.AppUser", b =>
            {
                b.Property<string>("Id")
                    .HasColumnType("nvarchar(450)");

                b.Property<int>("AccessFailedCount")
                    .HasColumnType("int");

                b.Property<string>("ConcurrencyStamp")
                    .IsConcurrencyToken()
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("Email")
                    .HasColumnType("nvarchar(256)")
                    .HasMaxLength(256);

                b.Property<bool>("EmailConfirmed")
                    .HasColumnType("bit");

                b.Property<bool>("LockoutEnabled")
                    .HasColumnType("bit");

                b.Property<DateTimeOffset?>("LockoutEnd")
                    .HasColumnType("datetimeoffset");

                b.Property<string>("NormalizedEmail")
                    .HasColumnType("nvarchar(256)")
                    .HasMaxLength(256);

                b.Property<string>("NormalizedUserName")
                    .HasColumnType("nvarchar(256)")
                    .HasMaxLength(256);

                b.Property<string>("PasswordHash")
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("PhoneNumber")
                    .HasColumnType("nvarchar(max)");

                b.Property<bool>("PhoneNumberConfirmed")
                    .HasColumnType("bit");

                b.Property<string>("SecurityStamp")
                    .HasColumnType("nvarchar(max)");

                b.Property<bool>("TwoFactorEnabled")
                    .HasColumnType("bit");

                b.Property<string>("UserName")
                    .HasColumnType("nvarchar(256)")
                    .HasMaxLength(256);

                b.HasKey("Id");

                b.HasIndex("NormalizedEmail")
                    .HasName("EmailIndex");

                b.HasIndex("NormalizedUserName")
                    .IsUnique()
                    .HasName("UserNameIndex")
                    .HasFilter("[NormalizedUserName] IS NOT NULL");

                b.ToTable("AspNetUsers");
            });

            modelBuilder.Entity("TeamProject.Domain.Entities.Film.Film", b =>
            {
                b.Property<int>("FilmId")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int")
                    .HasAnnotation("SqlServer:ValueGenerationStrategy",
                        SqlServerValueGenerationStrategy.IdentityColumn);

                b.Property<string>("Description")
                    .HasColumnType("nvarchar(4000)")
                    .HasMaxLength(4000);

                b.Property<DateTime>("PublishYear")
                    .HasColumnType("date");

                b.Property<string>("Title")
                    .IsRequired()
                    .HasColumnType("nvarchar(128)")
                    .HasMaxLength(128);

                b.HasKey("FilmId");

                b.HasIndex("Title")
                    .IsUnique()
                    .HasName("UNQ_Films_Title");

                b.ToTable("Film");
            });

            modelBuilder.Entity("TeamProject.Domain.Entities.Film.FilmPhoto", b =>
            {
                b.Property<int>("PhotoId")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int")
                    .HasAnnotation("SqlServer:ValueGenerationStrategy",
                        SqlServerValueGenerationStrategy.IdentityColumn);

                b.Property<int>("FilmId")
                    .HasColumnType("int");

                b.Property<string>("Path")
                    .IsRequired()
                    .HasColumnType("nvarchar(512)")
                    .HasMaxLength(512);

                b.HasKey("PhotoId");

                b.HasIndex("FilmId");

                b.HasIndex("Path")
                    .IsUnique()
                    .HasName("UNQ_FilmsPhotos_Path");

                b.ToTable("FilmPhoto");
            });

            modelBuilder.Entity("TeamProject.Domain.Entities.Genre", b =>
            {
                b.Property<int>("GenreId")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int")
                    .HasAnnotation("SqlServer:ValueGenerationStrategy",
                        SqlServerValueGenerationStrategy.IdentityColumn);

                b.Property<string>("Title")
                    .HasColumnType("nvarchar(64)")
                    .HasMaxLength(64);

                b.HasKey("GenreId");

                b.HasIndex("Title")
                    .IsUnique()
                    .HasName("UNQ_Genres_Title")
                    .HasFilter("[Title] IS NOT NULL");

                b.ToTable("Genre");
            });

            modelBuilder.Entity("TeamProject.Domain.Entities.Log", b =>
            {
                b.Property<int>("LogId")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int")
                    .HasAnnotation("SqlServer:ValueGenerationStrategy",
                        SqlServerValueGenerationStrategy.IdentityColumn);

                b.Property<string>("Application")
                    .IsRequired()
                    .HasColumnType("nvarchar(64)")
                    .HasMaxLength(64);

                b.Property<string>("Callsite")
                    .HasColumnType("nvarchar(512)")
                    .HasMaxLength(512);

                b.Property<string>("Exception")
                    .HasColumnType("nvarchar(512)")
                    .HasMaxLength(512);

                b.Property<string>("Level")
                    .IsRequired()
                    .HasColumnType("nvarchar(64)")
                    .HasMaxLength(64);

                b.Property<string>("Message")
                    .IsRequired()
                    .HasColumnType("nvarchar(512)")
                    .HasMaxLength(512);

                b.Property<string>("Service")
                    .HasColumnType("nvarchar(512)")
                    .HasMaxLength(512);

                b.Property<DateTime>("Time")
                    .HasColumnType("datetime2");

                b.HasKey("LogId");

                b.ToTable("Logs");
            });

            modelBuilder.Entity("TeamProject.Domain.Entities.ManyToMany.ActorsFilms", b =>
            {
                b.Property<int>("ActorId")
                    .HasColumnType("int");

                b.Property<int>("FilmId")
                    .HasColumnType("int");

                b.HasKey("ActorId", "FilmId");

                b.HasIndex("FilmId");

                b.ToTable("ActorsFilms");
            });

            modelBuilder.Entity("TeamProject.Domain.Entities.ManyToMany.FilmsGenres", b =>
            {
                b.Property<int>("FilmId")
                    .HasColumnType("int");

                b.Property<int>("GenreId")
                    .HasColumnType("int");

                b.HasKey("FilmId", "GenreId");

                b.HasIndex("GenreId");

                b.ToTable("FilmsGenres");
            });

            modelBuilder.Entity("TeamProject.Domain.Entities.ManyToMany.VotingPolleRelation", b =>
            {
                b.Property<int>("VotingPolleId")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int")
                    .HasAnnotation("SqlServer:ValueGenerationStrategy",
                        SqlServerValueGenerationStrategy.IdentityColumn);

                b.Property<int>("PolleId")
                    .HasColumnType("int");

                b.Property<int>("VotingAnswerId")
                    .HasColumnType("int");

                b.Property<int>("VotingId")
                    .HasColumnType("int");

                b.HasKey("VotingPolleId");

                b.HasIndex("PolleId");

                b.HasIndex("VotingAnswerId");

                b.HasIndex("VotingId");

                b.ToTable("VotingPolleRelation");
            });

            modelBuilder.Entity("TeamProject.Domain.Entities.Voting.Voting", b =>
            {
                b.Property<int>("VotingId")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int")
                    .HasAnnotation("SqlServer:ValueGenerationStrategy",
                        SqlServerValueGenerationStrategy.IdentityColumn);

                b.Property<string>("Name")
                    .IsRequired()
                    .HasColumnType("nvarchar(512)")
                    .HasMaxLength(512);

                b.HasKey("VotingId");

                b.HasIndex("Name")
                    .IsUnique()
                    .HasName("UNQ_Voting_Name");

                b.ToTable("Voting");
            });

            modelBuilder.Entity("TeamProject.Domain.Entities.Voting.VotingAnswer", b =>
            {
                b.Property<int>("VotingAnswerId")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int")
                    .HasAnnotation("SqlServer:ValueGenerationStrategy",
                        SqlServerValueGenerationStrategy.IdentityColumn);

                b.Property<string>("Text")
                    .IsRequired()
                    .HasColumnType("nvarchar(512)")
                    .HasMaxLength(512);

                b.Property<int>("VotingId")
                    .HasColumnType("int");

                b.HasKey("VotingAnswerId");

                b.HasIndex("VotingId");

                b.ToTable("VotingAnswer");
            });

            modelBuilder.Entity("TeamProject.Domain.Entities.Voting.VotingPolle", b =>
            {
                b.Property<int>("VotingPolleId")
                    .HasColumnType("int");

                b.HasKey("VotingPolleId");

                b.ToTable("VotingPolle");
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
            {
                b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                    .WithMany()
                    .HasForeignKey("RoleId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
            {
                b.HasOne("TeamProject.Domain.Entities.AppUser", null)
                    .WithMany()
                    .HasForeignKey("UserId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
            {
                b.HasOne("TeamProject.Domain.Entities.AppUser", null)
                    .WithMany()
                    .HasForeignKey("UserId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
            {
                b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                    .WithMany()
                    .HasForeignKey("RoleId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.HasOne("TeamProject.Domain.Entities.AppUser", null)
                    .WithMany()
                    .HasForeignKey("UserId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
            {
                b.HasOne("TeamProject.Domain.Entities.AppUser", null)
                    .WithMany()
                    .HasForeignKey("UserId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

            modelBuilder.Entity("TeamProject.Domain.Entities.Actor.ActorPhoto", b =>
            {
                b.HasOne("TeamProject.Domain.Entities.Actor.Actor", "Actor")
                    .WithMany("ActorsPhotos")
                    .HasForeignKey("ActorId")
                    .HasConstraintName("FK_ActorsPhotos_ActorId")
                    .IsRequired();
            });

            modelBuilder.Entity("TeamProject.Domain.Entities.Film.FilmPhoto", b =>
            {
                b.HasOne("TeamProject.Domain.Entities.Film.Film", "Film")
                    .WithMany("FilmsPhotos")
                    .HasForeignKey("FilmId")
                    .HasConstraintName("FK_FilmsPhotos_FilmId")
                    .IsRequired();
            });

            modelBuilder.Entity("TeamProject.Domain.Entities.ManyToMany.ActorsFilms", b =>
            {
                b.HasOne("TeamProject.Domain.Entities.Actor.Actor", "Actor")
                    .WithMany("ActorsFilms")
                    .HasForeignKey("ActorId")
                    .HasConstraintName("FK_ActorsFilms_ActorId")
                    .IsRequired();

                b.HasOne("TeamProject.Domain.Entities.Film.Film", "Film")
                    .WithMany("ActorFilms")
                    .HasForeignKey("FilmId")
                    .HasConstraintName("FK_ActorsFilms_FilmId")
                    .IsRequired();
            });

            modelBuilder.Entity("TeamProject.Domain.Entities.ManyToMany.FilmsGenres", b =>
            {
                b.HasOne("TeamProject.Domain.Entities.Film.Film", "Film")
                    .WithMany("FilmGenres")
                    .HasForeignKey("FilmId")
                    .HasConstraintName("FK_FilmsGenres_FilmId")
                    .IsRequired();

                b.HasOne("TeamProject.Domain.Entities.Genre", "Genre")
                    .WithMany("FilmsGenres")
                    .HasForeignKey("GenreId")
                    .HasConstraintName("FK_FilmsGenres_GenreId")
                    .IsRequired();
            });

            modelBuilder.Entity("TeamProject.Domain.Entities.ManyToMany.VotingPolleRelation", b =>
            {
                b.HasOne("TeamProject.Domain.Entities.Voting.VotingPolle", "Polle")
                    .WithMany("VotingPolles")
                    .HasForeignKey("PolleId")
                    .HasConstraintName("FK_VotingPolles_PolleId")
                    .IsRequired();

                b.HasOne("TeamProject.Domain.Entities.Voting.VotingAnswer", "VotingAnswer")
                    .WithMany("VotingPolles")
                    .HasForeignKey("VotingAnswerId")
                    .HasConstraintName("FK_VotingPolles_VotingAnswerId")
                    .IsRequired();

                b.HasOne("TeamProject.Domain.Entities.Voting.Voting", "Voting")
                    .WithMany("VotingPolles")
                    .HasForeignKey("VotingId")
                    .HasConstraintName("FK_VotingPolles_VotingId")
                    .IsRequired();
            });

            modelBuilder.Entity("TeamProject.Domain.Entities.Voting.VotingAnswer", b =>
            {
                b.HasOne("TeamProject.Domain.Entities.Voting.Voting", "Voting")
                    .WithMany("VotingAnswers")
                    .HasForeignKey("VotingId")
                    .HasConstraintName("FK_VotingAnswers_VotingId")
                    .IsRequired();
            });
#pragma warning restore 612, 618
        }
    }
}